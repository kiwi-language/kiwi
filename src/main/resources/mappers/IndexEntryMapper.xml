<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.metavm.object.instance.persistence.mappers.IndexEntryMapper">
    <resultMap id="BaseResultMap" type="tech.metavm.object.instance.persistence.IndexEntryPO">
        <!--@mbg.generated-->
        <!--@Table index_entry-->
        <result property="tenantId" jdbcType="BIGINT" column="tenant_id"/>
        <result property="constraintId" jdbcType="BIGINT" column="constraint_id"/>
        <result property="column0" column="column0"/>
        <result property="column1" column="column1"/>
        <result property="column2" column="column2"/>
        <result property="column3" column="column3"/>
        <result property="column4" column="column4"/>
        <result property="columnXPresent" jdbcType="BOOLEAN" column="column_x_present"/>
        <result property="columnX" jdbcType="BIGINT" column="column_x"/>
        <result property="instanceId" jdbcType="BIGINT" column="instance_id"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        tenant_id,
        constraint_id,
        column0,
        column1,
        column2,
        column3,
        column4,
        column_x_present,
        column_x,
        instance_id
    </sql>

    <update id="batchDelete">
        <!--@mbg.generated-->
        delete
        from index_entry
        where
            (tenant_id, constraint_id, column0, column1, column2, column3, column4, column_x_present, column_x,
             instance_id) in
        <foreach collection="collection" item="item" open="(" close=")" separator=",">
            (#{item.tenantId}, #{item.constraintId}, #{item.column0}, #{item.column1}, #{item.column2}, #{item.column3},
             #{item.column4}, #{item.columnXPresent}, #{item.columnX}, #{item.instanceId})
        </foreach>
    </update>

    <insert id="batchInsert">
        <!--@mbg.generated-->
        insert into index_entry (tenant_id, constraint_id, column0, column1, column2, column3, column4,
                                 column_x_present, column_x, instance_id)
        values
        <foreach collection="collection" item="item" separator=",">
            (#{item.tenantId}, #{item.constraintId}, #{item.column0}, #{item.column1}, #{item.column2},
             #{item.column3}, #{item.column4}, #{item.columnXPresent}, #{item.columnX}, #{item.instanceId})
        </foreach>
    </insert>

    <select id="countByKeys" resultType="java.lang.Long">
        select count(1)
        from index_entry
        where tenant_id = #{tenantId}
          and
            (constraint_id, column0, column1, column2, column3, column4, column_x_present, column_x) in
        <foreach collection="keys" item="item" open="(" close=")" separator=",">
            (#{item.constraintId}, #{item.column0}, #{item.column1}, #{item.column2}, #{item.column3}, #{item.column4},
             #{item.columnXPresent}, #{item.columnX})
        </foreach>
    </select>

    <select id="selectByKeys" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where tenant_id = #{tenantId}
          and
            (constraint_id, column0, column1, column2, column3, column4, column_x_present, column_x) in
        <foreach collection="keys" item="item" open="(" close=")" separator=",">
            (#{item.constraintId}, #{item.column0}, #{item.column1}, #{item.column2}, #{item.column3}, #{item.column4},
             #{item.columnXPresent}, #{item.columnX})
        </foreach>
    </select>

    <select id="selectByInstanceIdsOrKeys" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where tenant_id = #{tenantId}
          and (
        <trim suffixOverrides="or">
            <if test="instanceIds != null and instanceIds.size() != 0">
                instance_id in
                <foreach collection="instanceIds" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
                or
            </if>
            <if test="keys != null and keys.size() != 0">
                (constraint_id, column0, column1, column2, column3, column4, column_x_present, column_x) in
                <foreach collection="keys" item="item" open="(" close=")" separator=",">
                    (#{item.constraintId}, #{item.column0}, #{item.column1}, #{item.column2}, #{item.column3},
                     #{item.column4}, #{item.columnXPresent}, #{item.columnX})
                </foreach>
                or
            </if>
        </trim>
        )
    </select>

    <select id="query" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where tenant_id = #{tenantId}
          and constraint_id = #{constraintId}
          and column0 = #{key.column0}
          and column1 = #{key.column1}
          and column2 = #{key.column2}
          and column3 = #{key.column3}
          and column4 = #{key.column4}
          and column_x_present = #{key.columnXPresent}
        <if test="columnXOperator.code == 1">
            and column_x = #{key.columnX}
        </if>
        <if test="columnXOperator.code == 2">
            and column_x > #{key.columnX}
        </if>
        <if test="columnXOperator.code == 3">
            and column_x >= #{key.columnX}
        </if>
        <if test="columnXOperator.code == 4">
            and column_x &lt; #{key.columnX}
        </if>
        <if test="columnXOperator.code == 5">
            and column_x &lt;= #{key.columnX}
        </if>
        order by column_x
        <if test="desc">
            desc
        </if>
        <if test="limit != null and limit != -1">
            limit #{limit}
        </if>
        <if test="lockMode == 1">
            for
            share
        </if>
        <if test="lockMode == 2">
            for
            update
        </if>
    </select>
</mapper>