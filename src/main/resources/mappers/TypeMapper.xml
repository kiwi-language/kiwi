<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.metavm.object.meta.persistence.mappers.TypeMapper">

  <resultMap id="BaseResultMap" type="tech.metavm.object.meta.persistence.TypePO">
    <!--@mbg.generated-->
    <!--@Table type-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="tenant_id" jdbcType="BIGINT" property="tenantId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="category" jdbcType="INTEGER" property="category"/>
    <result column="desc" jdbcType="VARCHAR" property="desc"/>
    <result column="ephemeral" jdbcType="BOOLEAN" property="ephemeral"/>
    <result column="base_type_id" jdbcType="BIGINT" property="baseTypeId"/>
    <result column="anonymous" jdbcType="BOOLEAN" property="anonymous"/>
  </resultMap>

  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, tenant_id, `name`, category, `desc`, ephemeral, base_type_id, anonymous
  </sql>

  <select id="selectByName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from type where name = #{name} and deleted_at = 0 limit 1
  </select>

  <select id="count" resultType="long">
    select count(1) from type where
    tenant_id=#{tenantId}
    and deleted_at = 0
    <if test="categories != null">
      and category in
      <foreach collection="categories" item="category" open="(" close=")" separator=",">
        #{category.code}
      </foreach>
    </if>
    <if test="searchText != null">
      and name like CONCAT('%', #{searchText}, '%')
    </if>
    <if test="anonymous != null">
      and anonymous = #{anonymous}
    </if>
  </select>

  <select id="query" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from
    type
    where deleted_at = 0
    <if test="categories != null">
      and category in
      <foreach collection="categories" item="category" open="(" close=")" separator=",">
        #{category.code}
      </foreach>
    </if>
    <if test="searchText != null">
      and name like CONCAT('%', #{searchText}, '%')
    </if>
    <if test="anonymous != null">
      and anonymous = #{anonymous}
    </if>
    limit #{start}, #{limit}
  </select>

  <select id="selectByBaseTypeId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from
    type
    where
    base_type_id = #{elementTypeId}
    and deleted_at = 0
  </select>

  <select id="getPrimitiveTypes" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from type
    where tenant_id = -1 and category > 10 and deleted_at = 0
  </select>

  <select id="selectByCode" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from type
    where category = #{code}
  </select>

  <select id="selectByCategoryAndBaseId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from type
    where category = #{category} and base_type_id = #{baseTypeId} and deleted_at = 0
  </select>

  <select id="selectByIds" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from
    type
    where id in
    <foreach collection="collection" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
    and deleted_at = 0
  </select>

  <insert id="batchInsert">
    <!--@mbg.generated-->
    insert into type (id, tenant_id, `name`, category, `desc`, ephemeral, base_type_id, anonymous)
    values
    <foreach collection="collection" item="item" separator=",">
      (#{item.id}, #{item.tenantId}, #{item.name}, #{item.category}, #{item.desc}, #{item.ephemeral},
      #{item.baseTypeId}, #{item.anonymous})
    </foreach>

  </insert>

  <update id="batchUpdate">
    <!--@mbg.generated-->
    <foreach collection="collection" item="item" separator=";">
      update type
      <set>
        <if test="item.tenantId != null">
          tenant_id = #{item.tenantId},
        </if>
        <if test="item.name != null">
          `name` = #{item.name},
        </if>
        <if test="item.category != null">
          category = #{item.category},
        </if>
        <if test="item.desc != null">
          `desc` = #{item.desc},
        </if>
        <if test="item.ephemeral != null">
          ephemeral = #{item.ephemeral},
        </if>
        <if test="item.baseTypeId != null">
          base_type_id = #{item.baseTypeId},
        </if>
        <if test="item.anonymous != null">
          anonymous = #{item.anonymous},
        </if>
      </set>
      where id = #{item.id} and deleted_at = 0
    </foreach>
  </update>

  <update id="batchDelete">
    update type
    set deleted_at = unix_timestamp() * 1000
    where
    deleted_at = 0 and
    id in
    <foreach collection="collection" item="item" separator="," open="(" close=")">
        #{item}
    </foreach>
  </update>

</mapper>