@Label("课程类型")
enum ClassType {
    @Label("讲座") LECTURE,
    @Label("实验") LAB,
    @Label("研讨会") SEMINAR
;
}

@Label("课程")
class Course(
    @Summary
    @Label("课程代码")
    val code: string,
    @Label("课程名称")
    val title: string,
    @Label("学分")
    val credits: int
) {

}

@Label("教师")
class Instructor(
    @Summary
    @Label("姓名")
    val name: string,
    @Label("员工ID")
    val employeeId: string
) {

}

@Label("学生")
class Student(
    @Summary
    @Label("姓名")
    val name: string,
    @Label("学号")
    val studentId: string
) {

}

@Label("教室")
class Room(
    @Summary
    @Label("房间名称")
    val name: string,
    @Label("容量")
    val capacity: int
) {

}

@Label("班级会话")
class ClassSession(
    @Label("课程")
    val course: Course,
    @Label("教师")
    var instructor: Instructor,
    @Label("教室")
    var room: Room,
    @Label("开始时间")
    val startTime: string,
    @Label("持续分钟")
    val durationMinutes: int,
    @Label("最大学生数")
    val maxStudents: int,
    @Label("类型")
    val type: ClassType
) {
    @Summary
    priv val summary = course.title + " - " + startTime + " in " + room.name + " (" + type + ")"

    @Label("已注册学生数")
    var enrolledCount: int = 0

    @Label("注册")
    fn enrollStudent(@Label("学生") student: Student, @Label("注册日期") enrollmentDate: string) -> Enrollment {
        require(enrolledCount < maxStudents, "Class is full")
        val enrollment = Enrollment(student, enrollmentDate)
        enrolledCount += 1
        return enrollment
    }

    @Label("更新教师")
    fn updateInstructor(@Label("新教师") newInstructor: Instructor) {
        this.instructor = newInstructor
    }

    @Label("更新教室")
    fn updateRoom(@Label("新教室") newRoom: Room) {
        this.room = newRoom
    }

    @Label("注册信息")
    class Enrollment(
        @Label("学生")
        val student: Student,
        @Label("注册日期")
        val enrollmentDate: string
    )

}

@Bean
@Label("排课服务")
class SchedulingService {

    @Label("创建课程会话")
    fn createClassSession(
        @Label("课程") course: Course,
        @Label("教师") instructor: Instructor,
        @Label("教室") room: Room,
        @Label("开始时间") startTime: string,
        @Label("持续分钟") durationMinutes: int,
        @Label("最大学生数") maxStudents: int,
        @Label("类型") type: ClassType
    ) -> ClassSession {
        require(room.capacity >= maxStudents, "Room capacity is less than max students")
        val session = ClassSession(course, instructor, room, startTime, durationMinutes, maxStudents, type)
        return session
    }

    @Label("注册学生到课程")
    fn registerStudentToClass(
        @Label("课程会话") session: ClassSession,
        @Label("学生") student: Student,
        @Label("注册日期") enrollmentDate: string
    ) -> ClassSession.Enrollment {
        return session.enrollStudent(student, enrollmentDate)
    }

}