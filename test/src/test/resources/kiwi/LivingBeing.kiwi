import java.util.List
import java.util.ArrayList

class LivingBeing {

    priv var age: int
    priv var extra: any?
    priv var offsprings: List<LivingBeing>
    priv var ancestors: List<LivingBeing>

    init(age: int, extra: any?) {
        this.age = age
        this.extra = extra
        this.offsprings = ArrayList<LivingBeing>()
        this.ancestors = ArrayList<LivingBeing>()
    }

    fn getAge() -> int {
        return this.age
    }

    fn getExtra() -> any|null {
        return this.extra
    }

    fn getOffsprings() -> List<LivingBeing> {
        return ArrayList<LivingBeing>(this.offsprings)
    }

    fn getAncestors() -> List<LivingBeing> {
        return ArrayList<LivingBeing>(this.ancestors)
    }

    fn addOffspring(offspring: LivingBeing) {
        this.offsprings.add(offspring)
    }

    fn addAncestor(ancestor: LivingBeing) {
        this.ancestors.add(ancestor)
    }

    fn makeSound() -> string {
        return "Gu gu gu gu"
    }

}

class Animal: LivingBeing {

    priv var intelligence: int

    init(age: int, extra: any|null, intelligence: int) {
        super.init(age, extra)
        this.intelligence = intelligence
    }

    fn getIntelligence() -> int {
        return this.intelligence
    }

    fn makeSound() -> string {
        return "Howl~"
    }

}

class Human: Animal, Sentient {

    priv var occupation: string
    priv var thinking: bool

    init(age: int, extra: any|null, intelligence: int, occupation: string) {
        super.init(age, extra, intelligence)
        this.occupation = occupation
        this.thinking = false
    }

   fn getOccupation() -> string {
        return this.occupation
   }

   fn isThinking() -> bool {
        return this.thinking
   }

   fn makeSound() -> string {
        return "I am a human being"
   }

   fn think() {
        this.thinking = true
   }

}

interface Sentient {

    fn think()

}