package innerclass

class InnerClassExtension {

    priv val value0: int

    init(value0: int) {
        this.value0 = value0
    }

    static fn sum(v1: int, v2: int, v3: int, v4: int) -> int {
        var i1 = InnerClassExtension(0).Inner2(v1, v3)
        var i2 = i1.Inner21(v2, v4)
        return i2.sum()
    }

    class Inner2: Inner1 {

        priv val value3: int

        init(value1: int, value3: int) {
            super.init(value1)
            this.value3 = value3
        }

        class Inner21: Inner11 {

            priv val value4: int

            init(value2: int, value4: int) {
                super.init(value2)
                this.value4 = value4
            }

            fn sum() -> int {
                return value0 + value1 + value2 + value3 + value4
            }

            fn value1() -> int {
                return value1
            }

        }

    }

    class Inner1 {

        val value1: int

        init(value1: int) {
            this.value1 = value1
        }

        class Inner11 {

            val value2: int

            init(value2: int) {
                this.value2 = value2
            }

        }

    }

}

