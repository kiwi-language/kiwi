package innerclass

import java.util.ArrayList
import java.util.Iterator
import java.util.List

class InnerClassFoo<K, V> {

    priv val entries: List<Entry<K, V>> = ArrayList<Entry<K, V>>()

    fn addEntry(key: K, value: V) {
        entries.add(Entry<K, V>(key, value))
    }

    fn iterator() -> Iterator<Entry<K, V>> {
        return MyIterator()
    }

    fn first() -> Entry<K, V> {
        var it = iterator()
        if (it.hasNext()) return it.next()
        throw IllegalStateException()
    }

    class Entry<K, V>(
            priv var key: K,
            priv var value: V
    ) {

        fn getKey() -> K {
            return key
        }

        fn setKey(key: K) {
            this.key = key
        }

        fn getValue() -> V {
            return value
        }

        fn setValue(value: V) {
            this.value = value
        }

    }

    temp class MyIterator: Iterator<Entry<K,V>> {

        priv val it = entries.iterator()

        fn hasNext() -> bool {
            return it.hasNext()
        }

        fn next() -> Entry<K, V> {
            return it.next()
        }

        fn copy() -> MyIterator {
            return MyIterator()
        }

    }

}

