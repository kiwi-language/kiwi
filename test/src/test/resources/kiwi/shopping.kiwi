
class Product(
    var name: string,
    var price: double,
    var stock: int
) {

    fn reduceStock(quantity: int) {
        require(stock >= quantity, "Insufficient stock")
        stock -= quantity
    }

}

class Coupon(
    var title: string,
    var discount: double
) {

    var used = false

    fn redeem() {
        require(!used, "Coupon already used")
        used = true
    }

}

class Order(var totalPrice: double) {

    var status = OrderStatus.PENDING

    class Item(
        val product: Product,
        val quantity: int
    ) {

        static val productIdx = Index<Product, Item>(false, i -> i.product)

    }

}

@Bean
class OrderService {

    fn placeOrder(product: Product, quantity: int, coupon: Coupon?) -> Order {
        product.reduceStock(quantity)
        var price = product.price * quantity
        if (coupon != null) {
            coupon!!.redeem()
            price -= coupon!!.discount
        }
        val order = Order(price)
        order.Item(product, 1)
        return order
    }

    fn findOrderItemsByProduct(product: Product) -> Order.Item[] {
        return Order.Item.productIdx.getAll(product)
    }

    fn confirmOrder(order: Order) {
        if (order.status == OrderStatus.PENDING) {
            order.status = OrderStatus.CONFIRMED
        } else {
            throw Exception("Order cannot be confirmed, current status: " + order.status)
        }
    }

}


enum OrderStatus {
    PENDING,
    CONFIRMED,
    CANCELLED
    ;
}