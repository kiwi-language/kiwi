import java.util.List
import java.util.ArrayList
import java.lang.RuntimeException

@Searchable
class Product {
    priv var name: string
    priv val skuList: ArrayList<SKU>

    init(name: string, skuList: List<SKU>) {
        this.name = name
        this.skuList = ArrayList<SKU>(skuList)
    }

    fn getName() -> string {
        return this.name
    }

    fn setName(name: string) {
        this.name = name
    }

    fn getSkuList() -> List<SKU> {
        return ArrayList<SKU>(this.skuList)
    }

    fn setSkuList(skuList: List<SKU>) {
        this.skuList.clear()
        this.skuList.addAll(skuList)
    }

}

class SKU {

    priv var name: string
    priv var price: double
    priv var quantity: int

    init(name: string, price: double, quantity: int) {
        this.name = name
        this.price = price
        this.quantity = quantity
    }

    fn decQuantity(quantity: int) {
        if (this.quantity < quantity) {
            throw RuntimeException("Out of inventory")
        }
        this.quantity = this.quantity - quantity
    }

    fn buy(quantity: int, coupons: List<Coupon>) -> Order {
        this.decQuantity(quantity)
        var size = coupons.size()
        var i = 0
        var totalDiscount = 0.0
        while (i < size) {
            var coupon = coupons.get(i)!!
            var discount = coupon.use()
            i = i + 1
            totalDiscount = totalDiscount + discount
        }
        return Order(this.name, quantity, this.price * (quantity as double) - totalDiscount, this, coupons)
    }

    fn getName() -> string {
        return this.name
    }

    fn setName(name: string) {
        this.name = name
    }

    fn getPrice() -> double {
        return this.price
    }

    fn setPrice(price: double) {
        this.price = price
    }

    fn getQuantity() -> int {
        return this.quantity
    }

    fn setQuantity(quantity: int) {
        this.quantity = quantity
    }

}

class Coupon {
    priv val name: string
    priv val discount: double
    priv var state: CouponState

    init(name: string, discount: double) {
        this.name = name
        this.discount = discount
        this.state = CouponState.NORMAL
    }

    fn getName() -> string {
        return this.name
    }

    fn getDiscount() -> double {
        return this.discount
    }

    fn getState() -> CouponState {
        return this.state
    }

    fn use() -> double {
        if(this.state == CouponState.USED) {
            throw RuntimeException("Coupon already used")
        }
        this.state = CouponState.USED
        return this.discount
    }

}

enum CouponState {
    NORMAL,
    USED

;

}

@Searchable
class Order {
    priv val code: string
    priv val quantity: int
    priv val price: double
    priv val sku: SKU
    priv val coupons: List<Coupon>
    priv val orderTime: time

    init(code: string, quantity: int, price: double, sku: SKU, coupons: List<Coupon>) {
        this.code = code
        this.quantity = quantity
        this.price = price
        this.sku = sku
        this.coupons = ArrayList<Coupon>(coupons)
        this.orderTime = now()
    }

    fn getCode() -> string {
        return this.code
    }

    fn getQuantity() -> int {
        return this.quantity
    }

    fn getPrice() -> double {
        return this.price
    }

    fn getSku() -> SKU {
        return this.sku
    }

    fn getTime() -> time {
        return this.orderTime
    }

    fn getCoupons() -> List<Coupon> {
        return ArrayList<Coupon>(this.coupons)
    }

}
