import org.metavm.api.Index

class Product: Versioned {


    static fn findByName(name: string) -> Product? {
        return Product.nameIdx.getFirst(name)
    }

    priv var name: string
    priv var price: double
    priv var inventory: Inventory
    priv var available: bool
    priv var description: string?
    priv var manufacturer: any

    priv static var nameIdx = Index<string, Product>(true, p -> p.name)

    init(name: string, price: double, quantity: int, description: string?, manufacturer: any) {
        super.init()
        this.name = name
        this.price = price
        this.inventory = Inventory(quantity)
        this.description = description
        this.manufacturer = manufacturer
    }

    fn getName() -> string {
        return this.name
    }

    fn setName(name: string) {
        this.name = name
    }

    fn getPrice() -> double {
        return this.price
    }

    fn setPrice(price: double) {
        this.price = price
    }

    fn getInventory() -> Inventory {
        return this.inventory
    }

    fn setInventory(inventory: Inventory) {
        this.inventory = inventory
    }

    fn isAvailable() -> bool {
        return this.available
    }

    fn setAvailable(available: bool) {
        this.available = available
    }

    fn getDescription() -> string? {
        return this.description
    }

    fn setDescription(description: string?) {
        this.description= description
    }

    priv fn __available__() -> bool {
        return true
    }

    priv fn __price__(price: int) -> double {
        return price as double
    }

    priv fn __Versioned__() -> Versioned {
        return Versioned()
    }

    fn getManufacturer() -> any {
        return this.manufacturer
    }

    fn setManufacturer(manufacturer: any) {
        this.manufacturer = manufacturer
    }

}

class Inventory {
    priv var quantity: int

    init(quantity: int) {
        this.quantity = quantity
    }

    fn getQuantity() -> int {
        return this.quantity
    }

    fn setQuantity(quantity: int) {
        this.quantity = quantity
    }

}

class Versioned {

    priv var version = Version(0, 0)

    fn getVersion() -> Version {
        return this.version
    }

    fn setVersion(version: Version) {
        this.version = version
    }

}

value class Version {
    priv val majorVersion: int
    priv val minorVersion: int

    init(majorVersion: int, minorVersion: int) {
        this.majorVersion = majorVersion
        this.minorVersion = minorVersion
    }

    fn getMajorVersion() -> int{
        return this.majorVersion
    }

    fn getMinorVersion() -> int {
        return this.minorVersion
    }

}

class Box<T> {
    priv var item: T
    priv var count: int

    init(item: T, count: int) {
        this.item = item
        this.count = count
    }

    fn getItem() -> T {
        return this.item
    }

    fn setItem(item: T) {
        this.item = item
    }

    fn getCount() -> int {
        return this.count
    }

    fn setCount(count: int) {
        this.count = count
    }

    priv fn __count__() -> int {
        return 1
    }

}
