abstract class BaseService {

    protected readonly IdService idService;

    public BaseService(IdService idService) {
        this.idService = idService;
    }

}

record IdxFooServiceAllFlags {

    private readonly boolean allFlags;

    public IdxFooServiceAllFlags(boolean allFlags) {
        this.allFlags = allFlags;
    }

}

@Component
class FooService extends BaseService {

    private readonly boolean allFlags;
    private readonly BarService barService;

    public FooService(IdService idService, BarService barService) {
        super(idService);
        this.allFlags = true;
        this.barService = barService;
    }

    public IdxFooServiceAllFlags idxAllFlags() {
        idx: new IdxFooServiceAllFlags(this.allFlags);
        return idx;
    }

}

@Component
class BarService extends BaseService {

    private readonly boolean allFlags;

    public BarService(IdService idService) {
        super(idService);
        this.allFlags = true;
    }

    public IdxBarServiceAllFlags idxAllFlags() {
        idx: new IdxBarServiceAllFlags(this.allFlags);
        return idx;
    }

}

record IdxBarServiceAllFlags {

    private readonly boolean allFlags;

    public IdxBarServiceAllFlags(boolean allFlags) {
        this.allFlags = allFlags;
    }

}

interface IdService {

}

@Component
class IdServiceImpl implements IdService {

    public IdService() {}

}

