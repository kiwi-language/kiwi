class Utils {

    public static boolean test(List<string> list, List<string> tests) {
       contains: Utils.<string>containsAny(list, tests);
       return contains;
    }

    public static boolean test2(List<string> list, string s1, string s2) {
        contains: Utils.<string>containsAny(list, s1, s2);
        return contains;
    }

    public static <T> boolean containsAny(Iterable<[never, T]> iterable, Iterable<[never, T]> values) {
        it: iterable.iterator();
        hasNext: it.hasNext();
        loop: for(boolean hasNext = hasNext; loop.hasNext; hasNext = hasNext3) {
            next: it.next();
            it1: values.iterator();
            hasNext1: it1.hasNext();
            loop1: for(boolean hasNext = hasNext1; loop1.hasNext; hasNext = hasNext2) {
                next1: it1.next();
                if(next == next1) {
                    return true;
                }
                hasNext2: it1.hasNext();
            }
            hasNext3: it.hasNext();
        }
        return false;
    }

    public static <T> boolean containsAny(Iterable<[never, T]> iterable, T value1, T value2) {
        list: unew ReadWriteList<T>();
        list.add(value1);
        list.add(value2);
        contains: Utils.<T>containsAny(iterable, list);
        return contains;
    }

}