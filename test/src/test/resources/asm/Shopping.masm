import java.util.List;
import java.util.ArrayList;
import java.lang.RuntimeException;
import org.metavm.api.ChildList;

@Searchable
struct Product {
    private title string name;
    private readonly child ChildList<SKU> skuList;

    public Product(string name, List<SKU> skuList) {
        this.name = name;
        skuListCopy: new ChildList<SKU>(skuList);
        this.skuList = skuListCopy;
    }

    public string getName() {
        return this.name;
    }

    public void setName(string name) {
        this.name = name;
    }

    public List<SKU> getSkuList() {
        skuList: unew ArrayList<SKU>(this.skuList);
        return skuList;
    }

    public void setSkuList(List<SKU> skuList) {
        this.skuList.clear();
        this.skuList.addAll(skuList);
    }

}

struct SKU {

    private title string name;
    private double price;
    private int quantity;

    public SKU(string name, double price, int quantity) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public void decQuantity(int quantity) {
        if (this.quantity < quantity) {
            exception: new RuntimeException("Out of inventory");
            throw exception;
        }
        this.quantity -= quantity;
    }

    public Order buy(int quantity, List<Coupon> coupons) {
        this.decQuantity(quantity);
        size: coupons.size();
        loop: for(int i = 0, double totalDiscount = 0; loop.i < size; i = loop.i + 1, totalDiscount = loop.totalDiscount + discount) {
            coupon: coupons.get(loop.i)!;
            discount: coupon.use();
        }
        order: new Order(this.name, quantity, this.price * quantity - loop.totalDiscount, this, coupons);
        return order;
    }

    public string getName() {
        return this.name;
    }

    public void setName(string name) {
        this.name = name;
    }

    public double getPrice() {
        return this.price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return this.quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

}

class Coupon {
    private title readonly string name;
    private readonly double discount;
    private CouponState state;

    public Coupon(string name, double discount) {
        this.name = name;
        this.discount = discount;
        this.state = CouponState.NORMAL;
    }

    public string getName() {
        return this.name;
    }

    public double getDiscount() {
        return this.discount;
    }

    public CouponState getState() {
        return this.state;
    }

    public double use() {
        if(this.state == CouponState.USED) {
            exception: new RuntimeException("Coupon already used");
            throw exception;
        }
        this.state = CouponState.USED;
        return this.discount;
    }

}

enum CouponState {
    NORMAL,
    USED
    ;

    CouponState() {
    }

}

@Searchable
class Order {
    private title readonly string code;
    private readonly int quantity;
    private readonly double price;
    private readonly SKU sku;
    private child readonly List<Coupon> coupons;
    private readonly time orderTime;

    public Order(string code, int quantity, double price, SKU sku, List<Coupon> coupons) {
        this.code = code;
        this.quantity = quantity;
        this.price = price;
        this.sku = sku;
        couponsCopy: new ArrayList<Coupon>(coupons);
        this.coupons = couponsCopy;
        this.orderTime = now();
    }

    public string getCode() {
        return this.code;
    }

    public int getQuantity() {
        return this.quantity;
    }

    public double getPrice() {
        return this.price;
    }

    public SKU getSku() {
        return this.sku;
    }

    public time getTime() {
        return this.orderTime;
    }

    public List<Coupon> getCoupons() {
        coupons: unew ArrayList<Coupon>(this.coupons);
        return coupons;
    }

}
