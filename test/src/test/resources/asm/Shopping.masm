struct Product {
    private title string name;
    private readonly child ChildList<SKU> skuList;

    public Product(string name, List<SKU> skuList) {
        this.name = _input.name;
        skuList: new ChildList<SKU>(_input.skuList);
        this.skuList = skuList;
        return this;
    }

    public string getName() {
        return this.name;
    }

    public void setName(string name) {
        this.name = _input.name;
        return;
    }

    public List<SKU> getSkuList() {
        skuList: unew ReadWriteList<SKU>(this.skuList);
        return skuList;
    }

    public void setSkuList(List<SKU> skuList) {
        this.skuList.clear();
        this.skuList.addAll(_input.skuList);
        return;
    }

}

struct SKU {

    private title string name;
    private double price;
    private int quantity;

    public SKU(string name, double price, int quantity) {
        this.name = _input.name;
        this.price = _input.price;
        this.quantity = _input.quantity;
        return this;
    }

    public void decQuantity(int quantity) {
        if (this.quantity < _input.quantity) {
            exception: new RuntimeException("库存不足");
            throw exception;
        }
        this.quantity -= _input.quantity;
        return;
    }

    public Order buy(int quantity, List<Coupon> coupons) {
        this.decQuantity(_input.quantity);
        size: _input.coupons.size();
        loop: for(int i = 0, double totalDiscount = 0; loop.i < size; i = loop.i + 1, totalDiscount = loop.totalDiscount + discount) {
            coupon: _input.coupons.get(loop.i);
            discount: coupon.use();
        }
        order: new Order(this.name, _input.quantity, this.price * _input.quantity - loop.totalDiscount, this, _input.coupons);
        return order;
    }

    public string getName() {
        return this.name;
    }

    public void setName(string name) {
        this.name = _input.name;
        return;
    }

    public double getPrice() {
        return this.price;
    }

    public void setPrice(double price) {
        this.price = _input.price;
        return;
    }

    public int getQuantity() {
        return this.quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = _input.quantity;
        return;
    }

}

class Coupon {
    private title readonly string name;
    private readonly double discount;
    private CouponState state;

    public Coupon(string name, double discount) {
        this.name = _input.name;
        this.discount = _input.discount;
        this.state = CouponState.NORMAL;
        return this;
    }

    public string getName() {
        return this.name;
    }

    public double getDiscount() {
        return this.discount;
    }

    public CouponState getState() {
        return this.state;
    }

    public double use() {
        if(this.state == CouponState.USED) {
            exception: new RuntimeException("Coupon already used");
            throw exception;
        }
        this.state = CouponState.USED;
        return this.discount;
    }

}

enum CouponState {
    NORMAL,
    USED
    ;

    CouponState() {
        return this;
    }

}

class Order {
    private title readonly string code;
    private readonly int quantity;
    private readonly double price;
    private readonly SKU sku;
    private child readonly List<Coupon> coupons;
    private readonly time orderTime;

    public Order(string code, int quantity, double price, SKU sku, List<Coupon> coupons) {
        this.code = _input.code;
        this.quantity = _input.quantity;
        this.price = _input.price;
        this.sku = _input.sku;
        coupons: new ReadWriteList<Coupon>(_input.coupons);
        this.coupons = coupons;
        this.orderTime = NOW();
        return this;
    }

    public string getCode() {
        return this.code;
    }

    public int getQuantity() {
        return this.quantity;
    }

    public double getPrice() {
        return this.price;
    }

    public SKU getSku() {
        return this.sku;
    }

    public time getTime() {
        return this.orderTime;
    }

    public List<Coupon> getCoupons() {
        coupons: unew ReadWriteList<Coupon>(this.coupons);
        return coupons;
    }

}
