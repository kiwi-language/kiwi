symbol.not.found=Symbol not found ''{0}''
unexpected.char=Unexpected character: ''{0}''
unexpected.token=Unexpected token: {0}
invalid.escape=Invalid escape ''\\{0}''
unclosed.comment=Unclosed comment
invalid.unicode.escape="Invalid unicode escape ''\\u{0}''
malformed.float.literal="Malformed float-point literal"
expected=''{0}'' expected
expected2=''{0}'' or ''{1}'' expected
expected3=''{0}'', ''{1}'' or ''{2}'' expected
expected4=''{0}'', ''{1}'', ''{2}'' or ''{3}'' expected
illegal.start.of.expr=Illegal start of expression
illegal.start.of.type=Illegal start of type
illegal.start.of.stmt=Illegal start of statement
illegal.new.expr=Illegal new expression
cant.resolve.expr=Cannot resolve expression
cant.resolve.symbol=Cannot resolve symbol
duplicate.binding.name=Duplicate binding name
cant.resolve.func=Cannot resolve function
cant.resolve.func.with.arg.types=Cannot resolve function with given argument types: {0}
debug1=debug: {0}
illegal=Illegal ''{0}''
foreach.not.applicable.to.type=For-each not applicable to type ''{0}''
variable.must.typed.or.initialized=Variable must either have a type annotation or be initialized
cant.apply.symbol=No suitable function found for {0}
cant.find.constructor=Cannot find constructor in {0} with given argument types: {1}
type.checking.circular.ref=Type checking has run into a recursive problem. Easiest workaround: specify types of your declarations explicitly