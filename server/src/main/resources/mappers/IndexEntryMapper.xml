<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.metavm.object.instance.persistence.mappers.IndexEntryMapper">
    <resultMap id="BaseResultMap" type="tech.metavm.object.instance.persistence.IndexEntryPO">
        <!--@mbg.generated-->
        <!--@Table index_entry-->
        <result property="appId" jdbcType="BIGINT" column="app_id"/>
        <result property="indexId" jdbcType="BIGINT" column="index_id"/>
        <result property="column0" column="column0"/>
        <result property="column1" column="column1"/>
        <result property="column2" column="column2"/>
        <result property="column3" column="column3"/>
        <result property="column4" column="column4"/>
        <result property="column5" column="column5"/>
        <result property="column6" column="column6"/>
        <result property="column7" column="column7"/>
        <result property="column8" column="column8"/>
        <result property="column9" column="column9"/>
        <result property="column10" column="column10"/>
        <result property="column11" column="column11"/>
        <result property="column12" column="column12"/>
        <result property="column13" column="column13"/>
        <result property="column14" column="column14"/>
        <result property="instanceId" jdbcType="BIGINT" column="instance_id"/>
        <result property="typeTag" jdbcType="SMALLINT" column="type_tag"/>
        <result property="typeId" jdbcType="BIGINT" column="type_id"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        app_id,
        index_id,
        column0,
        column1,
        column2,
        column3,
        column4,
        column5,
        column6,
        column7,
        column8,
        column9,
        column10,
        column11,
        column12,
        column13,
        column14,
        instance_id,
        type_tag,
        type_id
    </sql>

    <update id="batchDelete">
        <!--@mbg.generated-->
        delete
        from index_entry
        where
            (app_id, index_id, column0, column1, column2, column3, column4,column5,column6,column7,column8,column9,column10,column11,column12,column13,column14,instance_id) in
        <foreach collection="collection" item="item" open="(" close=")" separator=",">
            (#{item.appId}, #{item.indexId}, #{item.column0}, #{item.column1}, #{item.column2},
            #{item.column3}, #{item.column4}, #{item.column5}, #{item.column6}, #{item.column7}, #{item.column8}, #{item.column9}, #{item.column10}, #{item.column11}, #{item.column12}, #{item.column13}, #{item.column14},
            #{item.instanceId})
        </foreach>
    </update>

    <insert id="batchInsert">
        <!--@mbg.generated-->
        insert into index_entry (app_id, index_id, column0, column1, column2, column3, column4, column5,column6,column7,column8,column9,column10,column11,column12,column13,column14,instance_id, type_tag, type_id)
        values
        <foreach collection="collection" item="item" separator=",">
            (#{item.appId}, #{item.indexId}, #{item.column0}, #{item.column1}, #{item.column2},
            #{item.column3}, #{item.column4},
            #{item.column5}, #{item.column6}, #{item.column7}, #{item.column8}, #{item.column9}, #{item.column10}, #{item.column11}, #{item.column12}, #{item.column13}, #{item.column14},
            #{item.instanceId}, #{item.typeTag}, #{item.typeId})
        </foreach>
    </insert>

    <select id="selectByInstanceIdsOrKeys" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and (
        <trim suffixOverrides="or">
            <if test="instanceIds != null and instanceIds.size() != 0">
                instance_id in
                <foreach collection="instanceIds" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
                or
            </if>
            <if test="keys != null and keys.size() != 0">
                (index_id, column0, column1, column2, column3, column4,column5,column6,column7,column8,column9,column10,column11,column12,column13,column14) in
                <foreach collection="keys" item="item" open="(" close=")" separator=",">
                    (#{item.indexId}, #{item.column0}, #{item.column1}, #{item.column2}, #{item.column3},
                    #{item.column4}, #{item.column5}, #{item.column6}, #{item.column7}, #{item.column8}, #{item.column9}, #{item.column10}, #{item.column11}, #{item.column12}, #{item.column13}, #{item.column14})
                </foreach>
                or
            </if>
        </trim>
        )
    </select>

    <select id="query" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where
        <include refid="condition"/>
        <if test="desc">
            order by (column0, column1, column2, column3, column4, column5,column6,column7,column8,column9,column10,column11,column12,column13,column14) desc
        </if>
        <if test="limit != null">
            limit #{limit}
        </if>
        <if test="lockMode == 1">
            for
            share
        </if>
        <if test="lockMode == 2">
            for
            update
        </if>
    </select>

    <select id="count" resultType="long">
        select COUNT(1)
        from index_entry
        where
        <include refid="condition"/>
        <if test="lockMode == 1">
            for
                share
        </if>
        <if test="lockMode == 2">
            for
            update
        </if>
    </select>

    <sql id="condition">
            app_id = #{appId}
            and index_id = #{constraintId}
        <foreach collection="items" item="item">
            and ${item.columnName} ${item.operator.op} #{item.value}
        </foreach>
    </sql>

    <select id="selectByInstanceIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and
            instance_id in
        <foreach collection="instanceIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="selectByKeys" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and
            (index_id, column0, column1, column2, column3, column4, column5,column6,column7,column8,column9,column10,column11,column12,column13,column14) in
        <foreach collection="keys" item="item" open="(" close=")" separator=",">
            (#{item.indexId}, #{item.column0}, #{item.column1}, #{item.column2}, #{item.column3},
             #{item.column4}, #{item.column5}, #{item.column6}, #{item.column7}, #{item.column8}, #{item.column9}, #{item.column10}, #{item.column11}, #{item.column12}, #{item.column13}, #{item.column14})
        </foreach>
    </select>

    <select id="countRange" resultType="long">
        select
        count(1)
        from index_entry
        where app_id = #{appId}
        and index_id = #{from.indexId}
        and (column0, column1, column2, column3, column4, column5,column6,column7,column8,column9,column10,column11,column12,column13,column14) between
        (#{from.column0}, #{from.column1}, #{from.column2}, #{from.column3}, #{from.column4}, #{from.column5}, #{from.column6}, #{from.column7}, #{from.column8}, #{from.column9}, #{from.column10}, #{from.column11}, #{from.column12}, #{from.column13}, #{from.column14})
        and
        (#{to.column0}, #{to.column1}, #{to.column2}, #{to.column3}, #{to.column4}, #{to.column5}, #{to.column6}, #{to.column7}, #{to.column8}, #{to.column9}, #{to.column10}, #{to.column11}, #{to.column12}, #{to.column13}, #{to.column14})
    </select>

    <select id="scan" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and index_id = #{from.indexId}
          and (column0, column1, column2, column3, column4, column5,column6,column7,column8,column9,column10,column11,column12,column13,column14) between
            (#{from.column0}, #{from.column1}, #{from.column2}, #{from.column3}, #{from.column4}, #{from.column5}, #{from.column6}, #{from.column7}, #{from.column8}, #{from.column9}, #{from.column10}, #{from.column11}, #{from.column12}, #{from.column13}, #{from.column14})
            and
            (#{to.column0}, #{to.column1}, #{to.column2}, #{to.column3}, #{to.column4}, #{to.column5}, #{to.column6}, #{to.column7}, #{to.column8}, #{to.column9}, #{to.column10}, #{to.column11}, #{to.column12}, #{to.column13}, #{to.column14})
    </select>
</mapper>