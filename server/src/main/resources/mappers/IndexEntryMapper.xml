<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.metavm.object.instance.persistence.mappers.IndexEntryMapper">
    <resultMap id="BaseResultMap" type="org.metavm.object.instance.persistence.IndexEntryPO">
        <!--@mbg.generated-->
        <!--@Table index_entry-->
        <result property="appId" jdbcType="BIGINT" column="app_id"/>
        <result property="indexId" jdbcType="BINARY" column="index_id"/>
        <result property="data" jdbcType="BINARY" column="data"/>
        <result property="instanceId" jdbcType="BINARY" column="instance_id"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        app_id,
        index_id,
        data,
        instance_id
    </sql>

    <update id="batchDelete">
        <!--@mbg.generated-->
        delete
        from index_entry
        where
            (app_id, index_id, data, instance_id) in
        <foreach collection="collection" item="item" open="(" close=")" separator=",">
            (#{item.appId}, #{item.indexId}, #{item.data}, #{item.instanceId})
        </foreach>
    </update>

    <insert id="batchInsert">
        <!--@mbg.generated-->
        insert into index_entry (app_id, index_id, data, instance_id)
        values
        <foreach collection="collection" item="item" separator=",">
            (#{item.appId}, #{item.indexId}, #{item.data}, #{item.instanceId})
        </foreach>
    </insert>

    <select id="selectByInstanceIdsOrKeys" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and (
        <trim suffixOverrides="or">
            <if test="instanceIds != null and instanceIds.size() != 0">
                instance_id in
                <foreach collection="instanceIds" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
                or
            </if>
            <if test="keys != null and keys.size() != 0">
                (index_id, data) in
                <foreach collection="keys" item="item" open="(" close=")" separator=",">
                    (#{item.indexId}, #{item.data})
                </foreach>
                or
            </if>
        </trim>
        )
    </select>

    <select id="query" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where
        <include refid="condition"/>
        <if test="desc">
            order by data desc
        </if>
        <if test="limit != null">
            limit #{limit}
        </if>
        <if test="lockMode == 1">
            for
            share
        </if>
        <if test="lockMode == 2">
            for
            update
        </if>
    </select>

    <select id="count" resultType="long">
        select COUNT(1)
        from index_entry
        where
        <include refid="condition"/>
        <if test="lockMode == 1">
            for
                share
        </if>
        <if test="lockMode == 2">
            for
            update
        </if>
    </select>

    <sql id="condition">
            app_id = #{appId}
            and index_id = #{indexId}
        <if test="from != null">
            and data >= #{from.data}
        </if>
        <if test="to != null">
            and data &lt;= #{to.data}
        </if>
    </sql>

    <select id="selectByInstanceIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and
            instance_id in
        <foreach collection="instanceIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="selectByKeys" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and (index_id, data) in
        <foreach collection="keys" item="item" open="(" close=")" separator=",">
            (#{item.indexId}, #{item.data})
        </foreach>
    </select>

    <select id="countRange" resultType="long">
        select count(1)
        from index_entry
        where app_id = #{appId}
          and index_id = #{from.indexId}
          and data between #{from.data} and #{to.data}
    </select>

    <select id="scan" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_entry
        where app_id = #{appId}
          and index_id = #{from.indexId}
          and data between #{from.data} and #{to.data}
    </select>
</mapper>